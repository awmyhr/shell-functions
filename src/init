#!/bin/sh
# Author:     awmyhr <awmyhr@gmail.com>
# Contact:    awmyhr <awmyhr@gmail.com>
# Project:    Shell Functions
# Proj Home:  https://github.com/awmyhr/shell-functions
# Copyright:  2019 awmyhr
# License:    Apache-2.0
# Revised:    2019-07-05 # This revision is for the test-suite portion
# Created:    2019-06-28
##--==
#==============================================================================
init() {
    #:"""
    #: .. function:: init()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-07-05
    #:
    #: Check for requirements, other set-up stuff
    #:"""
##==---
    #-- Expected globals ------------------------------------------------------
    __backup_dsf__="${__backup_dsf__:="+%Y%m%d-%H%M%S"}"
    __container_safe__="${__container_safe__:=false}"
    __logln_file__="${__logln_file__:=unknown}"
    __logln_file_set__=${__logln_file_set__:=false}
    __require_root__="${__require_root__:=false}"
    #--------------------------------------------------------------------------
##--==
    #--------------------------------------------------------------------------
    #-- Check if effectively root
    #--------------------------------------------------------------------------
    if is_true "${__require_root__}" && [ "$(id -u)" -ne 0 ] ; then
      exit_error 77 'Must be run as root.'
    fi
    #--------------------------------------------------------------------------
    #-- Check if running inside Docker container
    #--------------------------------------------------------------------------
    if is_false "${__container_safe__}" && grep -q '/docker' /proc/self/cgroup ; then
      exit_error 78 'This script is not container safe.'
    fi
    #--------------------------------------------------------------------------
    #-- Set up log file
    if [ "${__logln_file__}" != "nil" ]; then
        mkdir -p "$(dirname "${__logln_file__}")"
        if [ -f "${__logln_file__}" ] ; then
            mv "${__logln_file__}" "${__logln_file__}"."$(get_timestamp "${__backup_dsf__}")"
        fi
        exec 3<> "${__logln_file__}" || exit 1
        __logln_file_set__='true'
    else
        exec 3>&1 || exit 1
        __logln_file_set__='false'
    fi
    _debug_info
    #--------------------------------------------------------------------------
    return
}
##==---
#==============================================================================
if ! (return 0 2>/dev/null) ; then
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f is_true >/dev/null 2>&1 ; then
        is_true() {
            if [ "${1}" = 'true' ] ; then
                return 0
            else
                return 1
            fi
        }
    fi
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f is_false >/dev/null 2>&1 ; then
        is_false() {
            if [ "${1}" = 'false' ] ; then
                return 0
            else
                return 1
            fi
        }
    fi
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f _debug_info >/dev/null 2>&1 ; then
        _debug_info() {
            printf 'Would call _debug_info() here.\n'
        }
    fi
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f get_timestamp >/dev/null 2>&1 ; then
        get_timestamp() {
            printf '%s' "${1}"
        }
    fi

    init "${@}"
fi
