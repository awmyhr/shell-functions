#!/bin/sh
# Author:     awmyhr <awmyhr@gmail.com>
# Contact:    awmyhr <awmyhr@gmail.com>
# Project:    Shell Functions
# Proj Home:  https://github.com/awmyhr/shell-functions
# Copyright:  2019 awmyhr
# License:    Apache-2.0
# Revised:    2019-07-05 # This revision is for the test-suite portion
# Created:    2019-06-28
##--==
#==============================================================================
usage_options() {
    #:"""
    #: .. function:: usage_options()
    #:
    #: .. project:: Shell Functions <https://github.com/awmyhr/shell-functions>
    #:
    #: .. revision:: 2019-07-05
    #:"""
    #:
    #: :param str option_strfmt: The format to use.
    #:"""
    #-- TODO: UPDATE option list.# {% raw %}
    if [ "${#}" -eq 1 ] ; then
        __usage_option_strfmt="${1}"
    elif [ "${#}" -eq 0 ] ; then # {% endraw %}
        __usage_option_strfmt='%s (%s)\n'
    else
        return 64
    fi

    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${__usage_option_strfmt}" '--help, -h' 'Dislay this help'
    #-- We are using a variable to format data in printf
    # shellcheck disable=2059
    printf "${__usage_option_strfmt}" '--version ' 'Display version'

    return
}
##==---
process_options() {
    #-- Expected globals ------------------------------------------------------
    __script_debug__="${__script_debug__:=false}"
    __logln_lvl__="${__logln_lvl__:=20}"
    #--------------------------------------------------------------------------
##--==
#==============================================================================
#-- Process options
#   NOTE: this is not optimal, but is an attempt to keep things POSIX
#         compliant. If you are expecting arguments instead of params,
#         be sure to assign them... somehow...
#   Be sure to update usage_options() as well
# {% raw %}
while [ "${#}" -gt 0 ]; do  # {% endraw %}
    case "${1}" in
        --debug)     __script_debug__='true'
                     __logln_lvl__=10 ;;
        -h|--help)   _usage      && exit 0 ;;
        --help-ec)   _usage_ec   && exit 0 ;;
        --help-rest) _usage_rest && exit 0 ;;
        --version)   _version    && exit 0 ;;
        # --)          shift && break ;;
        # -?*)         exit_error 64 "Invalid option: ${1}" ;;
        *)           exit_error 64 "Invalid option: ${1}" ;;
    esac

    shift
done
##==---
}
#==============================================================================
if ! (return 0 2>/dev/null) ; then
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f _usage >/dev/null 2>&1 ; then
        _usage() {
            printf 'Would call _usage() here.\n'
            usage_options
        }
    fi
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f _usage_ec >/dev/null 2>&1 ; then
        _usage_ec() {
            printf 'Would call _usage_ec() here.\n'
        }
        :
    fi
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f _usage_rest >/dev/null 2>&1 ; then
        _usage_rest() {
            printf 'Would call _usage_rest() here.\n'
        }
    fi
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f _version >/dev/null 2>&1 ; then
        _version() {
            printf 'Would call _version() here.\n'
        }
    fi
    if [ "${RUN_UNIT_TEST}" = 'true' ] || ! declare -f exit_error >/dev/null 2>&1 ; then
        exit_error() {
            printf 'exit_error: (%s) %s\n' "${1}" "${2}"
            exit "${1}"
        }
    fi
    process_options "${@}"
    printf '__script_debug__="%s"\n' "${__script_debug__}"
    printf '__logln_lvl__="%s"\n'   "${__logln_lvl__}"
fi
